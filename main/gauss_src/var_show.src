/*
 This file is part of the econometric software package JMulTi.
 Copyright (C) 2000-2005  Alexander Benkwitz

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
#ifos2win 
/* to be used by library creation, windows only */
#include var.dec
#endif
/*
** PURPOSE
** Prints data on screen.
**
** SYNTAX
** call vml_ShowData(model, showGraphs);
**
*/
proc(0)=vml_ShowData(model, showGraphs);
	local y,py,timeIdx;
	y  = vml_vread(model,"y");
	py = vml_vread(model,"py");
	timeIdx = seqa(1-py,1,rows(y));

	print "";
	print "The model contains the following variables:";
	print "===========================================";

	format /lzs 12,5;
	print "Number of observations (without presample values): " rows(y)-py;
	print "";
	print "Endogenous variables:";
	print "       Number of variables        : " cols(y);
	print "       Number of presample values : " py;
	print "       Observations (first column is time index)";
	format /rd 8,3;
	timeIdx~y;
	print /flush "";

endp;


/*
** PURPOSE
** Prints estimation results on screen.
**
** SYNTAX
** call vml_ShowEstimationResults(model, showGraphs);
**
*/
proc(0)=vml_ShowEstimationResults(var, outFileName);
	local K,r,em_exe,em,modelEstimated,
	      y, py, Ny, x, px, Nx, d, Nd, mx_cd2cr, 
	      keyList, idx, emptyMatrix,Nd_ec,Nd_vec;

   	let keyList={"y", "py", "Ny", "x", "px", "Nx", "d", "Nd", "mx_cd2cr",
	             "em_exe", "em"};
	idx = vnamecv(var)$+"        ";
   	idx = indcv(keyList$+"        ", idx);
	emptyMatrix = {};
   	for i(1,rows(idx),1);
		if scalmiss(idx[i]);
   			call varputl( emptyMatrix            , keyList[i]);
		else;
   			call varputl( vml_vread( var, keyList[i]), keyList[i]);
		endif;
   	endfor;

	K = y;
	r = vml_GetCointRank(var);
	if not rows(Ny);
		Ny = vml__createEndogenousNames(K);
	endif;
	if (not rows(Nx)) and cols(x);
		Nx = vml__createExogenousNames(cols(x));
	endif;
	if (not rows(Nd)) and cols(d);
		Nd = vml__createDeterministicNames(cols(d));
	endif;
		if rows(Nd);
""$+Nd;
mx_cd2cr; 
retp(0);
			{Nd_vec,Nd_ec}=var__splitDeterministicsNames(Nd,mx_cd2cr);
		endif;
	print /flush "";

	if rows(em_exe)==0;
		print /flush "The model was not estimated yet.";
	else;
		if rows(em)==0; em="none"; endif;
		if r==K;
			modelEstimated = "VAR";
		elseif r>0;
			modelEstimated = "VECM";
		else;
			modelEstimated = "VAR in differences";
		endif;
		print "The model was estimated as a "$+modelEstimated;
		print "Estimation method specified : "$+em;
		print "Estimation method applied   : "$+em_exe;
		print "";
		format /lzs 12,5;
		print "Number of observations (without presample values): " rows(y)-py;
		print "";
		print "Endogenous variables:" ""$+Ny';
		print "Number of lags      :" py;
		if rows(Nx);
			print "Exogenous variables :" ""$+Nx';
			print "Number of lags      :" px;
		endif;
		if modelEstimated$=="VECM";
			if rows(Nd);
				print "Deterministic variables";
				if rows(Nd_ec);
				print " - Restricted to ECM:" ""$+Nd_ec';
				endif;
				if rows(Nd_vec);
				print " - In system        :" ""$+Nd_vec';
				endif;
			endif;
			call var__showVEC_Coefficients(var,outFileName);
			call var__showVAR_Coefficients(var,outFileName);
		else;
			if rows(Nd);
			print "Deterministic variables:" ""$+Nd';
   			endif;
			call var__showVAR_Coefficients(var,outFileName);
		endif;
	endif;

endp;


/*
** PURPOSE
** Prints VAR representation on screen.
**
** SYNTAX
** call var__showVAR_Coefficients(model,outFileName);
**
*/
proc(0)=var__showVAR_Coefficients(model, outFileName);
	local eqNames, noEq, c, vNames,sr,sd,tv,pv,label,p,id;
	


	eqNames = vml_vread(model,"Ny");
	noEq    = cols(vml_vread(model,"y"));
	if rows(eqNames)<1; 
		eqNames = vml__createEndogenousNames(noEq); 
	endif;
	id = vml_vread(model,"id");
	if rows(id)<1;
		goto END;
	endif;
		
	print "";
	var__showLegend(outFileName);

	if outFileName$/="";
	  screen off;
	  output file=^outFileName on;
	endif;
	
	
	print "";
	c      = vml_vread(model,"A0");
	vNames = vml__createNamesVector(eqNames,0,0);
	sr     = vml_vread(model,"S_A0");
	sd     = vml_vread(model,"se_A0");
	tv     = vml_vread(model,"tv_A0");
	pv     = vml_vread(model,"pv_A0");
   	label  = "Current endogenous term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"A");
	p      = vml_vread(model,"py"); if rows(p)<1; p=0; endif;
	vNames = vml__createNamesVector(eqNames,minc(1|p),p);
	sr     = vml_vread(model,"S_A");
	sd     = vml_vread(model,"se_A");
	tv     = vml_vread(model,"tv_A");
	pv     = vml_vread(model,"pv_A");
   	label  = "Lagged endogenous term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);
   

	print "";
	c      = vml_vread(model,"B");
	p      = vml_vread(model,"px"); if rows(p)<1; p=0; endif;
	vNames = vml_vread(model,"Nx"); 
	if rows(vNames)<1;
		vNames = vml__createExogenousNames(cols(vml_vread(model,"x")));
	endif;	
	vNames = vml__createNamesVector(vNames,minc(0|p),p);
	sr     = vml_vread(model,"S_B");
	sd     = vml_vread(model,"se_B");
	tv     = vml_vread(model,"tv_B");
	pv     = vml_vread(model,"pv_B");
   	label  = "Current and lagged exogenous term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"C_VAR");
	vNames = vml_vread(model,"Nd"); 
	if rows(vNames)<1;
		vNames = vml__createDeterministicNames(cols(vml_vread(model,"d")));
	endif;
	if id$=="VEC";
		local  mx_cd2cr, Nd_vec,Nd_ec;
		mx_cd2cr = vml_vread( model, "mx_cd2cr");
		{Nd_vec,Nd_ec} = var__splitDeterministicsNames(vNames, mx_cd2cr);
		if rows(Nd_vec) and rows(Nd_ec);
			vNames = Nd_vec$|Nd_ec;
		elseif rows(Nd_vec);
			vNames = Nd_vec;
		elseif rows(Nd_ec);
			vNames = Nd_ec;
		else;
			vNames = {};
		endif;
	endif;
	vNames = vml__createNamesVector(vNames,0,0);
	sr     = vml_vread(model,"S_C_VAR");
	sd     = vml_vread(model,"se_C_VAR");
	tv     = vml_vread(model,"tv_C_VAR");
	pv     = vml_vread(model,"pv_C_VAR");
   	label  = "Deterministic term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"F_VAR");
	if rows(c);
		"There were mixed variables estimated but not displayed!";
	endif;

	END:
	
	output off;
	screen on;
endp;


/*
** PURPOSE
** Prints VEC representation on screen.
**
** SYNTAX
** call var__showVEC_Coefficients(model,outFileName);
**
*/
proc(0)=var__showVEC_Coefficients(model,outFileName);
	local endNames, eqNames, noEq, c, vNames, sr,sd,tv,pv,label,p,id,
	       mx_cd2cr, Nd_vec,Nd_ec, tmp,
	      beta, beta_d, beta_ex, bet_d_ex;
	if outFileName$/=""; 
	  screen off;
	  output file=^outFileName reset;
	endif;

	endNames = vml_vread(model,"Ny");
	noEq    = cols(vml_vread(model,"y"));
	if rows(endNames)<1; 
		endNames = vml__createEndogenousNames(noEq); 
	endif;
	eqNames = "d("$+endNames$+")";
	id = vml_vread(model,"id");
	if rows(id)<1 or id$/="VEC";
		goto END;
	endif;
		

	print "";
	c      = vml_vread(model,"G0");
	vNames = vml__createNamesVector(eqNames,0,0);
	sr     = vml_vread(model,"S_G0");
	sd     = vml_vread(model,"se_G0");
	tv     = vml_vread(model,"tv_G0");
	pv     = vml_vread(model,"pv_G0");
   	label  = "Current endogenous term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"G");
	p      = vml_vread(model,"py"); if rows(p)<1; p=1; endif;
	p      = p - 1;
	vNames = vml__createNamesVector(eqNames,minc(1|p),p);
	sr     = vml_vread(model,"S_G");
	sd     = vml_vread(model,"se_G");
	tv     = vml_vread(model,"tv_G");
	pv     = vml_vread(model,"pv_G");
   	label  = "Lagged endogenous term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);
   

	print "";
	c      = vml_vread(model,"B");
	p      = vml_vread(model,"px"); if rows(p)<1; p=0; endif;
	vNames = vml_vread(model,"Nx"); 
	if rows(vNames)<1;
		vNames = vml__createExogenousNames(cols(vml_vread(model,"x")));
	endif;	
	vNames = vml__createNamesVector(vNames,minc(0|p),p);
	sr     = vml_vread(model,"S_B");
	sd     = vml_vread(model,"se_B");
	tv     = vml_vread(model,"tv_B");
	pv     = vml_vread(model,"pv_B");
   	label  = "Current and lagged exogenous term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"C_VEC");
	vNames = vml_vread(model,"Nd"); 
	if rows(vNames)<1;
		vNames = vml__createDeterministicNames(cols(vml_vread(model,"d")));
	endif;
	mx_cd2cr = vml_vread( model, "mx_cd2cr");
   	{Nd_vec,Nd_ec} = var__splitDeterministicsNames(vNames, mx_cd2cr);
	vNames = Nd_vec;
	vNames = vml__createNamesVector(vNames,0,0);
	sr     = vml_vread(model,"S_C_VEC");
	sd     = vml_vread(model,"se_C_VEC");
	tv     = vml_vread(model,"tv_C_VEC");
	pv     = vml_vread(model,"pv_C_VEC");
   	label  = "Deterministic term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"F_VEC");
	if rows(c);
		"There were mixed variables estimated but not displayed!";
	endif;


	print "";
	c      = vml_vread(model,"alpha");
	vNames = vml_vread(model,"Nec"); 
	if rows(vNames)<1;
		vNames = vml__createErrorCorrectionNames(cols(c));
	endif;
	vNames = vml__createNamesVector(vNames,1,1);
	sr     = vml_vread(model,"S_alpha");
	sd     = vml_vread(model,"se_alpha");
	tv     = vml_vread(model,"tv_alpha");
	pv     = vml_vread(model,"pv_alpha");
   	label  = "Loading coefficients:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	beta    = vml_vread(model,"beta");
	beta_d  = vml_vread(model,"beta_d");
	beta_ex = vml_vread(model,"beta_x");
	bet_d_ex= vml_vread(model,"beta_d_x");
	c = beta~beta_d;
	vNames  = vml__createNamesVector(endNames,1,1);
	if rows(Nd_ec);
		vNames  = vNames$|Nd_ec;
	endif;
	eqNames = vml_vread(model,"Nec"); 
	if rows(eqNames)<1;
		eqNames = vml__createErrorCorrectionNames(rows(c));
	endif;
	eqNames = ""$+eqNames$+"(t-1)";
	if rows(beta);
		sr = vml__syncSRMatrix(vml_vread(model,"S_beta"),rows(beta),cols(beta));
		sd = vml_vread(model,"se_beta");
		tv = vml_vread(model,"tv_beta");
		pv = vml_vread(model,"pv_beta");
		if rows(beta_d) and type(sd)==6 and type(vml_vread(model,"se_bet_d"))==6;
			sr = sr~vml__syncSRMatrix(vml_vread(model,"S_beta_d"),rows(beta_d),cols(beta_d));
			sd = sd~vml_vread(model,"se_bet_d");
			tv = tv~vml_vread(model,"tv_bet_d");
			pv = pv~vml_vread(model,"pv_bet_d");
		endif;
	else;
		sr = {};
		sd = {};
		tv = {};
		pv = {};
	endif;
   	label  = "Estimated cointegration relation(s):";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	c = beta_ex~bet_d_ex;
	eqNames = vml_vread(model,"Nec_ex"); 
	if rows(c) and rows(eqNames)<1;
		eqNames = vml__createErrorCorrectionNames(rows(beta)+rows(beta_ex));
		tmp     = seqa(rows(beta)+1,1,rows(beta_ex));
		eqNames = eqNames[tmp];
	endif;
	eqNames = ""$+eqNames$+"(t-1)";
   	sr = 1;
	sd = {};
   	tv = {};
	pv = {};
   	label  = "Externally set cointegration relation(s):";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);

	
	END:
	
	output off;
	screen on;
endp;

/*
** PURPOSE
** Prints estimation of single equation of VECM on screen.
**
** SYNTAX
** call var__showEC_Coefficients(model, outFileName);
**
*/
proc(0)=var__showEC_Coefficients(model, outFileName);
	local eqNames, c,vNames,sr,label,p, eq_idx, noEndVar, endNames,
	      sd, tv, pv,tmp;
	
	if outFileName$/=""; 
	  screen off;
	  output file=^outFileName reset;
	endif;     
	      
	noEndVar = cols(vml_vread(model,"y"));
	endNames = vml_vread(model,"Ny");
	if rows(endNames)<1; 
		endNames = vml__createEndogenousNames(noEndVar); 
	endif;
   	eq_idx = vml_vread(model,"idx_equa");
	eqNames = "d("$+endNames[eq_idx]$+")";


	print "";
	c      = vml_vread(model,"G0");
	tmp    = setDif(seqa(1,1,noEndVar),eq_idx,1);
	vNames = vml__createNamesVector("d("$+endNames[tmp]$+")",0,0);
	sr     = vml_vread(model,"S_G0");
	if cols(sr)>1;
		sr = sr[tmp];
	endif;
	sd     = vml_vread(model,"se_G0");
	tv     = vml_vread(model,"tv_G0");
	pv     = vml_vread(model,"pv_G0");
   	label  = "Current endogenous term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"G");
	p      = vml_vread(model,"py"); if rows(p)<1; p=1; endif;
	p = p - 1;
	vNames = vml__createNamesVector("d("$+endNames$+")",minc(1|p),p);
	sr     = vml_vread(model,"S_G");
	sd     = vml_vread(model,"se_G");
	tv     = vml_vread(model,"tv_G");
	pv     = vml_vread(model,"pv_G");
   	label  = "Lagged endogenous term:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"B");
	p      = vml_vread(model,"px"); if rows(p)<1; p=0; endif;
	vNames = vml_vread(model,"Nx"); 
	if rows(vNames)<1;
		vNames = vml__createExogenousNames(cols(vml_vread(model,"x")));
	endif;	
	vNames = vml__createNamesVector(vNames,minc(0|p),p);
	sr     = vml_vread(model,"S_B");
	sd     = vml_vread(model,"se_B");
	tv     = vml_vread(model,"tv_B");
	pv     = vml_vread(model,"pv_B");
   	label  = "Current and lagged exogenous term:";
	var__showCoefficients(c, sd, tv, pv, sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"C_VEC");
	vNames = vml_vread(model,"Nd"); 
	if rows(vNames)<1;
		vNames = vml__createDeterministicNames(cols(vml_vread(model,"d")));
	endif;
   	local  mx_cd2cr, Nd_vec,Nd_ec;
	mx_cd2cr = vml_vread(model,"mx_cd2cr");
   	{Nd_vec,Nd_ec} = var__splitDeterministicsNames(vNames, mx_cd2cr);
	vNames = Nd_vec;
	vNames = vml__createNamesVector(vNames,0,0);
	sr     = vml_vread(model,"S_C_VEC");
	sd     = vml_vread(model,"se_C_VEC");
	tv     = vml_vread(model,"tv_C_VEC");
	pv     = vml_vread(model,"pv_C_VEC");
   	label  = "Deterministic term:";
	var__showCoefficients(c, sd, tv, pv, sr, vNames, eqNames, label);


	print "";
	c      = vml_vread(model,"F_VEC");
	if rows(c);
		"There were mixed variables estimated but not displayed!";
	endif;


	print "";
	c      = vml_vread(model,"beta");
	vNames = vml__createNamesVector(endNames,1,1);
	sr     = vml_vread(model,"S_beta");
	sr     = vml__syncSRMatrix(sr,rows(c),cols(c));
	sd     = vml_vread(model,"se_beta");
	tv     = vml_vread(model,"tv_beta");
	pv     = vml_vread(model,"pv_beta");
	if rows(Nd_ec); 
		c      = c~vml_vread(model,"beta_d");
		vNames = vNames$|Nd_ec;
		sr     = sr~vml__syncSRMatrix(vml_vread(model,"S_beta_d"),rows(c),rows(Nd_ec));
		sd 	   = sd~vml_vread(model,"se_bet_d");
		tv     = tv~vml_vread(model,"tv_bet_d");
		pv     = pv~vml_vread(model,"pv_bet_d");
	endif;
   	label  = "Cointegration relation:";
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);

	print "";
	print "";
	var__showLegend( outFileName);

	print "";
   	label  = "Normed cointegration relation:";
	tmp = vml_vread(model,"idx_norm");
	c  = c ./ c[tmp];
	eqNames = "";
	sd = {};
	tv = {};
	pv = {};
	var__showCoefficients(c, sd, tv, pv,  sr, vNames, eqNames, label);
	
	output off;
	screen on;
	
endp;

/*
**
*/
proc(0)=var__showLegend(outFileName);
	if outFileName$/=""; 
	  screen off;
	  output file=^outFileName reset;
	endif;
	
	print "Legend:";
	print "=======";
	print "              Equation 1   Equation 2  ...";
	print "------------------------------------------";
	print "Variable 1 | Coefficient          ...";
	print "           | (Std. Dev.)";
	print "           | {p - Value}";
	print "           | [t - Value]";
	print "Variable 2 |         ...";
	print "...";
	print "------------------------------------------";

	output off;
	screen on;
	
endp;
/*
**
** PURPOSE
** 
**
** SYNTAX
** laggedNames = vml__createNamesVector(eqNames,pmin,pmax);
**
** INPUT
** n / (M,1) / string array /
**
** OUTPUT
** laggedNames / (M*((pmax-pmin)+1),1) / string array /
**             / (0,0)                 / matrix       / (empty)
**
*/
proc(1)=vml__createNamesVector(eqNames,pmin,pmax);
	local p,laggedNames,idx;
	if rows(eqNames);
		/* equal length!, some formatting. */
			p = zeros(rows(eqNames),1);
			for i(1,rows(p),1);
				p[i] = strlen(""$+eqNames[i]);
			endfor;
			p = maxc(p)-p;
			for i(1,rows(p),1);
				if p[i]>0; 
					eqNames[i] = eqNames[i]$+chrs(32*ones(p[i],1));
				endif;
			endfor;
		/* do the job */
		p = pmax-pmin+1;
		if p<1;
			p = 1;
		endif;
		laggedNames = ""$+zeros(p*rows(eqNames),1);
		for i(0,p-1,1);
			idx = pmin + i;
			if idx==0;
				idx = "(t)";
			else;
				idx = "(t-"$+ftocv(idx,1,0)$+")";
			endif;
			laggedNames[i*rows(eqNames)+1:(i+1)*rows(eqNames)] = ""$+eqNames$+idx;
		endfor;
		/* correct useless time index */
		for i(1,rows(laggedNames),1);
			if laggedNames[i]$=="CONST(t)";
				laggedNames[i]="CONST   ";
			endif;
		endfor;
	else;
		laggedNames = {};
	endif;
	retp(laggedNames);
endp;


/*
** PURPOSE
** Helper Method for {\tt vml\_ShowModelParameters()}.
**
** SYNTAX
** call var__showModelParameter(x, startIdx, Neq,  Nx);
**
** INPUT
** x          / (K,L*px) /
**            / (0,0)    /
** Nx         / (L,1)    /
** Neq        / (K,1)    /
** startIdx   / (1,1)    /
** label      / (1,1)    /
**
** OUTPUT
** screen output
**
** REMARK
** The procedure returns without screen output if {\tt x=\{\}}.
**
** GLOBALS
** __var_showPrecision
** __var_showWidth
**
*/
proc(0)=var__showCoefficients(c, sd, tv, pv, sr, Nv, Neq, label);
	local tmp,widthCoeff,offSet,sa,prec;

	if rows(c);
		Neq = ""$+Neq;

		if label$/="";
			print label;
			print chrs(61*ones(strlen(""$+label),1));
		endif;
		widthCoeff = maxc(9|__var_showWidth);

		offSet = 1 + (rows(sd)>0) + (rows(tv)>0) + (rows(pv)>0);

		sr = vml__syncSRMatrix(sr,rows(c),cols(c));
		sa  = ""$+zeros(rows(c),cols(c)*offSet);
		prec = __var_showPrecision;
		for i(1,rows(c),1);
			for j(0,cols(c)-1,1);
				if sr[i,j+1];
					sa[i,(offSet*j)+1] = ftos(real(c[i,j+1]),"%lf ",prec+1,prec);
					if rows(sd);
						if type(sd)==6;
							tmp = ftos(real(sd[i,j+1]),"%lf",prec+1,prec);
						elseif type(sd)==13;
							tmp = sd;
						elseif type(sd)==15;
							tmp = sd[i,j+1];
						else;
							tmp = " ? ";
						endif;
						sa[i,(offSet*j)+2] = "("$+tmp$+")";
					endif;
					if rows(tv);
						if type(tv)==6;
							tmp = ftos(real(tv[i,j+1]),"%lf",prec+1,prec);
						elseif type(tv)==13;
							tmp = tv;
						elseif type(tv)==15;
							tmp = tv[i,j+1];
						else;
							tmp = " ? ";
						endif;
						sa[i,(offSet*j)+4] = "["$+tmp$+"]";
					endif;
					if rows(pv);
						if type(pv)==6;
							tmp = ftos(real(pv[i,j+1]),"%lf",prec+1,prec);
						elseif type(pv)==13;
							tmp = pv;
						elseif type(pv)==15;
							tmp = pv[i,j+1];
						else;
							tmp = " ? ";
						endif;
						sa[i,(offSet*j)+3] = "{"$+tmp$+"}";
					endif;
				else;
					sa[i,(offSet*j)+1] = "--- ";
					if rows(sd);
						sa[i,(offSet*j)+2] = "(   )";
					endif;
					if rows(tv);
						sa[i,(offSet*j)+4] = "[   ]";
					endif;
					if rows(pv);
						sa[i,(offSet*j)+3] = "{   }";
					endif;
				endif;
			endfor;
		endfor;
	
		/* ensure that all elements of Nv have the same length */
			tmp = zeros(rows(Nv),1);
			for i(1,rows(tmp),1);
				@ tmp[i]=maxc(widthCoeff|strlen(""$+Nv[i])); @
				tmp[i]=strlen(""$+Nv[i]);
			endfor;
			tmp = maxc(tmp)-tmp;
			for i(1,rows(tmp),1);
				if tmp[i]>0;
					Nv[i]=Nv[i]$+chrs(32*ones(tmp[i],1));
				endif;
			endfor;
			
		sa=(chrs(32*ones(strlen(""$+Nv[1]),1))$+zeros(cols(sa),1))$~(sa');
		for i(0,rows(Nv)-1,1);
			sa[(offset*i)+1,1]=Nv[i+1];
		endfor;

		/* make '|' line */
			for i(1,rows(sa),1);
				sa[i,1]=sa[i,1]$+"|";
			endfor;

		/* compute '----' line */
		if Neq$/="";
			Neq=Neq$+" ";
			tmp = zeros(rows(Neq),1);
			for i(1,rows(Neq),1);
				tmp[i]=maxc(widthCoeff|strlen(""$+Neq[i]));
			endfor;
			tmp = sumc(tmp)+maxc(widthCoeff|strlen(""$+Nv[1]));
			tmp = tmp + cols(sa) - 1;
			tmp = chrs(45*ones(tmp,1));
		else;
			tmp = widthCoeff*rows(c)+maxc(widthCoeff|strlen(""$+Nv[1]));
			tmp = tmp + cols(sa) - 1;
			tmp = chrs(45*ones(tmp,1));
		endif;

		format /sa /rd widthCoeff,-1;
		if Neq$/="";
			print (chrs(32*ones(strlen(""$+Nv[1]),1))$~Neq');
		endif;
		if rows(sa)>1;
			print tmp sa;
		else;
			print tmp;
			print sa;
		endif;
		print /flush tmp;
	endif;   
endp;





















