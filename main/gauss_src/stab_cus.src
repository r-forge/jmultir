/*
 This file is part of the econometric software package JMulTi.
 Copyright (C) 2000-2005  Dmitri Boreiko, Markus Kraetzig

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
#ifos2win 
/* to be used by library creation, windows only */
#include extern.dec
#endif


/*written by Dmitri Boreiko, Dmitri.Boreiko@iue.it
and some add-ons by Markus Kraetzig, mk@mk-home.de
last change Dec 2002
*/

/*wrapper method to call cusum without having the databuffer*/  

proc(0) = stab_VARcusum_wrapper(var,_strt, startdate,periodicity,sign,isgraph,cusum);
local e,w,lines,j, k, tmp, tmp1, strn,x_show, abst,empt, dumm,_str;

local y,x,d,py,px,Cy,Cx,Cd,Ny,Nx,Nd;

local pltype,pcolor, plwidth,pnumht;

pltype = { 6, 3, 3, 1 }; 
pcolor = {2, 1, 1, 1};
plwidth = {9, 9, 9, 3};
pnumht = 0.18; 


y = vml_vread(var,"y");
x = vml_vread(var,"x");
d = vml_vread(var,"d");
py =vml_vread(var,"py");
px =vml_vread(var,"px");
Ny =vml_vread(var, "Ny");
/* Ny[1] = "D(R)"; */
/* Ny[2] = "D(Dp)"; */
Nx =vml_vread(var, "Nx");
Nd =vml_vread(var, "Nd");

 _strt = py+py*cols(y)+cols(d)+1;
if cols(x);
_strt = _strt +(px+1)*cols(x);
endif;

startdate = trunc(startdate)+ ( (startdate-trunc(startdate))*10 -1)/periodicity+0.5/ periodicity;

/* disabled dynamic correction as asked by the professor */

{e} = calc_recurs_resid_gen_stab (var,_strt,0);

if isgraph;
graphset;

if cusum;
{w,lines} = cusum_stab(e,1-sign); 
x_show = seqa(Startdate+ (_strt-py-1)/periodicity,1/periodicity,rows(w));
begwind;
 tmp =ceil(cols(w)/2); 
 tmp1 = ceil(cols(w)/2);
  if cols(w)==2; tmp = tmp+1; endif;
 window(tmp,tmp1,0);
 setGlobalPlot_plot();
 _plegctl = 0;

  for j(1,cols(w),1);
    strn = "CUSUM statistics for " $+Ny[j] $+" equation";
    _ptitle = strn;
     _pdate = "";
         
     _pltype = pltype; 
  _pcolor = pcolor;
  _plwidth = plwidth;
  _pnumht = pnumht; 
  
  if  __jm_show_plot_title == 0;
      _ptitle = "";
    endif;
    _ptitlht = __jm_height_plot_title;     

    xy(x_show, w[.,j]~lines);
    if j < cols(w);	nextwind;	endif;
   endfor;
  endwind;
if __XLM_LOADED; 	dllcall showLastGraphic; endif;

else;
{w,lines} = cusumsq_stab(e,1-sign);
x_show = seqa(Startdate+ (_strt-1)/periodicity,1/periodicity,rows(w));
begwind;
 tmp =ceil(cols(w)/2); 
 tmp1 = ceil(cols(w)/2);
  if cols(w)==2; tmp = tmp+1; endif;
 window(tmp,tmp1,0);
 setGlobalPlot_plot();
 _plegctl = 0;
  for j(1,cols(w),1);
    strn = "CUSUM-SQ statistics for " $+Ny[j] $+" equation";
    _ptitle = strn;
  
    _pltype = pltype; 
  _pcolor = pcolor;
  _plwidth = plwidth;
  _pnumht = pnumht;   
    _pdate = "";
    
    if  __jm_show_plot_title == 0;
      _ptitle = "";
    endif;
    _ptitlht = __jm_height_plot_title;     

    xy(x_show, w[.,j]~lines);
    if j < cols(w);	nextwind;	endif;
   endfor;
  endwind;
if __XLM_LOADED; 	dllcall showLastGraphic; endif;
endif;
endif;

endp;


/* showing recursive residuals */

proc(2) = stab_VARrecres_wrapper(var,_strt, startdate,periodicity,Res_CI,_stand);

local e,x_show, empt, abst, tmp, tmp1,tmp2, j, dumm, k, strn, e_se, _lines, CI, CIs;
local y,x,d,py,px,Cy,Cx,Cd,Ny,Nx,Nd;
local pltype,pcolor, plwidth,pnumht;

pltype = { 6, 3, 3, 1 }; 
pcolor = {2, 1, 1, 1};
plwidth = {9, 9, 9, 3};
pnumht = 0.22;

y = vml_vread(var,"y");
x = vml_vread(var,"x");
d = vml_vread(var,"d");
py =vml_vread(var,"py");
px =vml_vread(var,"px");
Ny =vml_vread(var, "Ny");
Nx =vml_vread(var, "Nx");
Nd =vml_vread(var, "Nd");

_strt = py+py*cols(y)+cols(d)+1;
if cols(x);
_strt = _strt +(px+1)*cols(x);
endif;


startdate = trunc(startdate)+ ( (startdate-trunc(startdate))*10 -1)/periodicity+0.5/ periodicity;

/* Correction for dynamic model disabled */
{e} = calc_recurs_resid_gen_stab (var,_strt,0);


empt = {.};
abst = e[.,1] .== empt;
x_show = seqa(Startdate+ (_strt-sumc(abst)-1)/periodicity,1/periodicity,rows(e));

e_se = stdc(packr(e));
if not(_stand);
e= e ./ e_se';
CI = {};
_lines ={  1 1 0 0 10000 0 1 15 0,
		1 2 0 1 0 1 1 15 9,
	 	1 2 0 -1 0 -1 1 15 9,
		1 2 0 2 0 2 1 15 9,
		1 2 0 -2 0 -2 1 15 9};
_lines[2:rows(_lines), 3] = seqa(x_show[1],0,4);
_lines[2:rows(_lines),5] = seqa(x_show[rows(x_show)],0,4); 
else;
_lines ={  1 6 0 0 10000 0 1 15 0};
endif;
CIs={};
graphset;
begwind;
setGlobalPlot_plot();
 tmp =ceil(cols(e)/2); 
 tmp1 = ceil(cols(e)/2);
  if cols(e)==2; tmp = tmp+1; endif;
  window(tmp,tmp1,0);
  for j(1,cols(e),1);
    abst = e[.,j] .== empt;
    dumm = selif(x_show, abst);
    _pline = {};
    for k(1,rows(dumm),1);
      tmp = { 1 4 0 -10000 0 10000 1 15 0};
      tmp[3] = dumm[k];
      tmp[5] = dumm[k];
      _pline = _pline | tmp;
    endfor;
    if _stand;
	tmp2 = 	cdfni(res_CI)* e_se[j];
	  CIs = CIs ~ tmp2;
      CI = (e[.,j] - tmp2) ~  (e[.,j] + tmp2);
      _pltype = { 6, 2, 2 }; 
      _pcolor = { 14, 15, 15}; 
      _plwidth = {5, 8, 8};  
    endif;
    _pline = _pline | _lines;
    tmp1 = j;
    strn = "u"$+ftocv(tmp1,1,0); /*$+Ny[j];*/
    _ptitle = strn;
    _pltype = pltype; 
    _pcolor = pcolor;
    _plwidth = plwidth;
    _pnumht = pnumht;   
    _plegctl = 0;
    _pdate = "";

    if  __jm_show_plot_title == 0;
      _ptitle = "";
    endif;
    _ptitlht = __jm_height_plot_title;     
    xy(x_show, e[.,tmp1] ~ CI);
  if j < cols(e);	nextwind;	endif;
endfor;
endwind;
if __XLM_LOADED; 	
  dllcall showLastGraphic; 
endif;
retp(e, CIs);
endp;

  

/**********************************************************************************  
procedure to calculate the recursive residuals
INPUT : 
var - model buffer
start - time index from which to start the calculations

OUTPUT:
e - residuals series with dim (T - start+1) x cols(y)

************************************************************************************
*/

proc(1) = calc_recurs_resid_stab (var,start);

local 	u,T, Ut,e,y,py,x,d,px,var1,regr,regr_X,counter,i,j,_ind,resid,norml,A,B,C,
	unused, D_REG, DIFF_RANK, yy,_mss, tmp1, D_rest, S_C_VAR;

	
call varputl( vml_vread( var, "y"), "y");
call varputl( vml_vread( var, "py"), "py");
T = rows(y)-py;
call varputl( vml_vread( var, "x"), "x");
call varputl( vml_vread( var, "d"), "d");
call varputl( vml_vread( var, "px"), "px");
call varputl( vml_vread( var, "S_C_VAR"), "S_C_VAR");
var1 = var;

/* forming the X regressor matrix - initial 1:start-1 observations */
Regr_X = {};
diff_rank = 0;

if cols(d);
  {d_reg,unused,d_rest} = vec_getFullRankMat(d[1:start-1,.],S_C_VAR, 0);
  diff_rank = cols(d) - cols(d_reg);
endif;

/* by this the initial part of the sample left out of calculation will be reduced - Kraemer book, page  55 */


for i(py+1,start-1-diff_rank,1);
  regr = {};
  for j(i-1,i-py,-1); 
    regr = regr ~ y[j,.]; 
  endfor;
  if rows(x);
    for j(i-py+px,i-py, -1); 
      regr = regr ~ x[j,.]; 
    endfor;  
  endif;
  
  Regr_X = Regr_X | regr; 
endfor;

e = zeros(T-start+1+diff_rank+py,cols(y));

_mss = zeros(1,cols(y));
let tmp1 = {.};
 for i(1, cols(_mss),1);
 _mss[i]= tmp1;
 endfor;

@ general cycle @

for i(start - diff_rank, T+py,1);

  var1 = vput(var1, y[1:i,.], "y" );
  
  if rows(x);   
    var1 = vput(var1,x[1:i-py+px,.],"x"); 
  endif;
  
  {d_reg,unused,d_rest} = vec_getFullRankMat(d[1:i,.],S_C_VAR, 0);
  var1 = vput(var1,d_reg,"d");  
  if rows(d_rest);   
    var1 = vput(var1,d_rest,"S_C_VAR");    
  endif;
  
  @ forming the regressors @
  regr = {};
  for j(i-1,i-py,-1); 
    regr = regr ~ y[j,.]; 
  endfor;
  if rows(x);
    for j(i-py+px,i-py, -1); 
      regr = regr ~ x[j,.]; 
    endfor;  
  endif;
  
  
  var1 = var_EstimateModel(var1);
  call varputl( vml_vread( var1, "A"), "A");
  call varputl( vml_vread( var1, "B"), "B");
  call varputl( vml_vread( var1, "C_Var"), "C");
  if rows(d_reg);
    resid = y[i,.] - (regr~ d_reg[rows(d_reg),.])*(A~B~C)';
  else;
    resid = y[i,.] - regr;
  endif;
  /* calculating the normalisation factor */
  if rows(d_reg);
    norml = sqrt (1+ (regr~d_reg[rows(d_reg),.]) * inv((Regr_X~d_reg[1+py:rows(d_reg)-1,.])' * 
    (Regr_X~ d_reg[1+py:rows(d_reg)-1,.])) * (regr~ d_reg[rows(d_reg),.])');   
  else;
    norml = sqrt (1+ regr * inv(Regr_X'*Regr_X) * regr');   
  endif;
  
  e[i-start+1+diff_rank,.] = resid/norml;
  
  Regr_X = Regr_X | regr;
endfor;
retp(e);
endp;


/* *****************************************************************************
procedure used to estimate the recursive residuals by single equation 
needed it because single equation and model estimation inputs are the same but
these procedures differ a bit 
***************************************************************************** */


proc(1) = calc_recurs_resid_gen_stab (var,start,Dufour_OLS);

local 	T,e,y,py,x,d,px,j,yy , _eq, y_en, y_ex, ind, var_eq, 
		S_A, S_B, S_C_VAR,S_en, S_ex, e1, empt, S_A1,xx,tmp;

empt = {};
call varputl( vml_vread( var, "y"), "y");
call varputl( vml_vread( var, "py"), "py");
T = rows(y)-py;

call varputl( vml_vread( var, "x"), "x");
call varputl( vml_vread( var, "d"), "d");
call varputl( vml_vread( var, "px"), "px");
call varputl( vml_vread( var, "S_A"), "S_A");
call varputl( vml_vread( var, "S_B"), "S_B");
call varputl( vml_vread( var, "S_C_VAR"), "S_C_VAR");
/* need to calculate the rec. residuals by single equation in all the cases 
- before it was done by model estimation in case of no subset restrictions 
but this has led to bigger part of initial sample left out of estimation - 
therefore it was decided to calculate the residuals by single equation 
(these two method would lead to the same result anyway)                 */

e={};

if cols(y) ==1;
{e} = calc_recurs_resid_stab (var,start);
else;
for _eq(1, cols(y),1); 

					@ split y into endog and exog parts  @

y_en = y[.,_eq];
ind = ones(cols(y),1);
ind[_eq] =0;
y_ex = (selif(y',ind))';


s_ex = {};
s_en = {};

 if rows(S_A); 				@ need to split restrictions into two parts @
   for j(1,cols(S_A),1);
    if ( j % cols(y)) == (_eq % cols(y));
    s_en = s_en ~ S_A[_eq,j];
    else; 
    s_ex = s_ex ~ S_A[_eq,j];
    endif;
   endfor; 
  endif;   /* rows(S_A)*/ 

 yy = vml__lagObservations(y_ex,py,1,py);
  if rows(x);
  xx = vml__lagObservations(x,px,0,px);
  yy =  xx ~ yy;
  if rows(S_B);
   S_ex = S_B[_eq,.] ~ S_ex;
   else;
   S_ex = zeros(1,cols(xx)) ~ S_ex;
   endif;
 endif;
 tmp = {};
 if rows(S_C_VAR);
   tmp = S_C_VAR[_eq,.];
 endif;
 var_eq = vec_CreateVAR(y_en,yy,d,py,0,empt,empt,empt,S_en,S_ex, tmp);

{e1} = calc_recurs_resid_stab (var_eq,start);
 e= e~e1;

endfor;   /* for _eq part */
endif;

retp(e);
endp;


/* *****************************************************************************  
procedure to calculate the cusum statistics with the significance level given 
INPUT : 
var     - recursive residuals
signif  - significance level
OUTPUT:
Qsum - statistics / (T-start) x 1
_line - significance lines / (T-start) x 1
******************************************************************************  
*/

proc(2) = cusum_stab (e,signif);

local i,sigm,w,lines,Cw,k;

Cw = {1.143 0.948 0.85};

    if feq(signif,0.01);
    k = 1;
    elseif feq(signif,0.05);
    k=2;
    elseif feq(signif,0.1);
    k=3;
    endif;

e = packr(e);
sigm = sqrt(diag((e'e)/(Rows(e))));
w = e;
lines = zeros(rows(w),2);

lines[1,1] =Cw[k]*sqrt(rows(e));
lines[1,2] =-Cw[k]*sqrt(rows(e));

for i(2,rows(w),1);
w[i,.] =w[i-1,.]+w[i,.]; 
lines[i,1] = lines[i-1,1] + 2*Cw[k]/sqrt(rows(e));
lines[i,2] = - lines[i,1];
endfor;

for i(1,cols(w),1);
w[.,i] = w[.,i]/sigm[i];
endfor;
retp (w,lines);
endp;



/******************************************************************************  
procedure to calculate the cusumSQ statistics with the significance level given 
INPUT : 
var     - recursive residuals
signif  - significance level
OUTPUT:
Qsum - statistics / T-start x 1
_line - two significance lines / T-start x 2
******************************************************************************  
*/


proc(2) = cusumSQ_stab (e,signif);

local i,sigm,w,lines,T,k,a,Cw, c_w, y;

Cw = { 
		/* T-k in rows, significance levels in columns */
0	0.1	0.05	0.01,
4	0.45	0.475	0.495,
6	0.44306	0.50855	0.59596,
8	0.41811	0.46702	0.579,
10	0.39075	0.44641	0.5421,
12	0.37359	0.42174	0.51576,
14	0.35522	0.40045	0.48988,
16	0.33905	0.38294	0.46761,
18	0.32538	0.36697	0.44819,
20	0.31325	0.35277	0.43071,
22	0.30221	0.34022	0.41517,
24	0.29227	0.32894	0.40122,
26	0.2833	0.31869	0.38856,
28	0.27515	0.30935	0.37703,
30	0.26767	0.30081	0.36649,
32	0.26077	0.29246	0.35679,
34	0.25439	0.2857	0.34784,
36	0.24847	0.27897	0.33953,
38	0.24296	0.2727	0.33181,
40	0.23781	0.26685	0.32459,
42	0.23298	0.26137	0.31784,
44	0.22644	0.25622	0.31149,
46	0.22416	0.25136	0.30552,
48	0.22012	0.24679	0.29989,
50	0.2163	0.24245	0.29456,
52	0.21268	0.23835	0.28951,
54	0.20924	0.23445	0.28472,
56	0.20596	0.23074	0.28016,
58	0.20283	0.22721	0.27582,
60	0.19985	0.22383	0.27168,
62	0.197	0.22061	0.26772,
64	0.19427	0.21752	0.26393,
66	0.19166	0.21457	0.2603,
68	0.18915	0.21173	0.25683,
70	0.18674	0.20901	0.25348,
72	0.18442	0.20639	0.25027,
74	0.18218	0.20387	0.24718,
76	0.18003	0.20144	0.24421,
78	0.17796	0.1991	0.24134,
80	0.17595	0.19684	0.23857,
82	0.17402	0.19465	0.23589,
84	0.17215	0.19254	0.23331,
86	0.17034	0.1905	0.23081,
88	0.16858	0.18852	0.22839,
90	0.16688	0.18661	0.22605,
92	0.16524	0.18475	0.22377,
94	0.16364	0.18295	0.22157,
96	0.16208	0.1812	0.21943,
98	0.16058	0.1795	0.21735,
100	0.15911	0.17785	0.21534,
102	0.15769	0.17624	0.21337,
104	0.1563	0.17468	0.21146,
106	0.15495	0.17316	0.20961,
108	0.15363	0.17168	0.2078,
110	0.15235	0.17024	0.20604,
112	0.1511	0.16884	0.20432,
114	0.14989	0.16746	0.20265,
116	0.1487	0.16613	0.20101,
118	0.14754	0.16482	0.19942,
120	0.14641	0.16355	0.19786,
122	0.1453	0.1623	0.19635,
124	0.14423	0.1611	0.19488,
126	0.14316	0.1599	0.19341,
128	0.14214	0.15875	0.19201,
130	0.14112	0.1576	0.19061,
132	0.14014	0.1565	0.189265,
134	0.13916	0.1554	0.18792,
136	0.13822	0.154345 0.186635,
138	0.13728	0.15329	0.18535,
140	0.13638	0.15228	0.184115,
142	0.13548	0.15127	0.18288,
144	0.134615	0.150295	0.181695,
146	0.13375	0.14932	0.18051,
148	0.132915	0.148385	0.17937,
150	0.13208	0.14745	0.17823,
152	0.13128	0.14655	0.177135,
154	0.13048	0.14565	0.17604,
156	0.12971	0.144535	0.17498,
158	0.12894	0.14342	0.17392,
160	0.128195	0.14283	0.1729,
162	0.12745	0.14224	0.17188,
164	0.12673	0.141435	0.1709,
166	0.12601	0.14063	0.16992,
168	0.125315	0.13985	0.16897,
170	0.12462	0.13907	0.16802,
172	0.123945	0.138315	0.1671,
174	0.12327	0.13756	0.16618,
176	0.12262	0.13683	0.16529,
178	0.12197	0.1361	0.1644,
180	0.12134	0.13539	0.16354,
182	0.12071	0.13468	0.16268,
184	0.1201	0.133995	0.161845,
186	0.11949	0.13331	0.16101,
188	0.1189	0.132645	0.160205,
190	0.11831	0.13198	0.1594,
192	0.117735	0.13134	0.158615,
194	0.11716	0.1307	0.15783,
196	0.1166	0.13007	0.15707,
198	0.11604	0.12944	0.15631,
200	0.1155	0.128835	0.15557,
202	0.11496	0.12823	0.15483};

e = packr(e);
T= rows(e);

if (T > 202);
  t = 202;
endif;

 if (T > 202) or (T < 4);
 errorlog(" For such a sample size the critical values for the CUSUM -Squares test are not available!");
   retp(-10,-10);
 endif;

y = selif(Cw, Cw[.,1] .== T);

if scalmiss(y);
y = ( selif(Cw, Cw[.,1] .== (T+1)) + selif( Cw, Cw[.,1] .== (T-1)) ) /2;
endif;

 if feq(signif,0.01);
    c_w = y[1, 4];
    elseif feq(signif,0.05);
    c_w = y[1,3];
    elseif feq(signif,0.10);
    c_w = y[1,2];
    endif;  

w = e;
w = w.^2;
lines = zeros(T, 2);
lines[1,1] =C_w; lines[1,2] = -C_w;

for i(2,T,1);
w[i,.] =w[i-1,.]+w[i,.]; 
lines[i,.] = lines[1,.] + (i-1)/T;
endfor;

for i(1,cols(w),1);
w[.,i] = w[.,i]/w[T, i];
endfor;

retp (w,lines);
endp;










